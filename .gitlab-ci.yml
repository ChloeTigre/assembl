image: ubuntu:latest

stages:
  - test
  - build
  - deploy_to_sandbox

test_frontend:
  stage: test
  only:
    - develop
  image: node:10
  before_script:
    - ln -fs /usr/share/zoneinfo/UTC /etc/localtime
    - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    - cd assembl/static2
    - yarn
  script:
    # This will fail if any test fails or if the coverage has lowered
    - yarn jest --coverage --maxWorkers 2
    - yarn run eslint
    - yarn run stylelint
    - yarn run flow --quiet

build_wheel:
  stage: build
  only:
    - develop
  variables:
    LC_ALL: C.UTF-8
    LANG: en.UTF-8
    GIT_STRATEGY: clone
  before_script:
    - ln -fs /usr/share/zoneinfo/UTC /etc/localtime
    - apt-get update -qq
    - apt-get install -yqq sudo python python-pip python-dev build-essential openssh-server
    # ssh agent setup
    - eval $(ssh-agent -s)
    - ps -p $SSH_AGENT_PID
    # add github bot ssh key
    - echo "$GITHUB_BOT_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # end of ssh agent setup
    - pip install virtualenv
    - cd $CI_PROJECT_DIR
    - python -mvirtualenv venv
    - source venv/bin/activate
    - pip install $(egrep '(invoke|boto3|requests|jinja2|semantic-version)' requirements.in)
    - "echo '_extends: aws.yaml' > invoke.yaml"
    - touch secrets.yaml
    - ln -s assembl/tasks .
    - inv -e build.prepare-cicd-build
    - mkdir wheelhouse
  script:
    - source venv/bin/activate
    - inv build.compile-static-assets
    - pip wheel -w wheelhouse -r requirements-prod.frozen.txt
    - inv build.create-wheel
    - inv build.push-wheelhouse
    - inv build.push-built-themes-to-remote-bucket

push_to_develop_server:
  stage: deploy_to_sandbox
  only:
    - develop
  before_script:
    - ln -fs /usr/share/zoneinfo/UTC /etc/localtime
    - apt-get update
    - apt-get install -yqq sudo python python-pip python-dev build-essential
    - pip install virtualenv
    - cd $CI_PROJECT_DIR
    - python -mvirtualenv venv
    - source venv/bin/activate
    - pip install $(egrep '(invoke|boto3|requests|jinja2|semantic-version)' requirements.in)
    # Fetch the configurations of sandbox from S3
    - "echo '_extends: aws.yaml' > invoke.yaml"
    - touch secrets.yaml
    - ln -s assembl/tasks .
  script:
    - inv build.deploy-to-sandbox
